	案例1：Git基本操作
本案例要求先快速搭建好一台Git服务器，并测试该版本控制软件，要求如下：
安装Git软件
创建版本库
客户端克隆版本仓库到本地
本地工作目录修改数据
提交本地修改到服务器
    部署Git服务器（192.168.2.100作为远程git服务器）
安装Git
yum -y install git
git --version

初始化一个空仓库
mkdir /var/git
git init /var/git/project --bare
ls /var/git/project

   客户端测试
git 常用指令
clone      将远程服务器的仓库克隆到本地
config     修改git 配置
add        添加修改到缓存区
commit     提交修改到本地仓库
push       提交修改到远程服务器


[root@web2 ~]# yum -y install git
[root@web2 ~]# git clone root@192.168.2.100:/var/git/project 
[root@web2 ~]# cd project
[root@web2 ~]# ls 

 修改git配置。

[root@web2 project]# git config --global user.email "you@example.com" //到后面报错提示再输入也行
[root@web2 project]# git config --global user.name "Your Name"  //同上
[root@web2 project]# cat ~/.gitconfig 
[user]
    email = you@example.com
    name = Your Name

本地工作区对数据进行增删改查(必须要先进入仓库再操作数据)。

[root@web2 project]# echo "init date" > init.txt
[root@web2 project]# mkdir demo
[root@web2 project]# cp /etc/hosts demo

 查看仓库中数据的状态。
git status   //建议多用

将工作区的修改提交到暂存区。
git add .

将暂存区修改提交到本地仓库。
git commit -m "注释解释"
git status

将本地仓库中的数据推送到远程服务器(web2将数据推送到web1)。
git config --global push.default simple  //输入下一命令时会报错提示 到时复制黏贴也行
git push 
root@192.168.2.100's password:  输入服务器root密码
git status

将服务器上的数据更新到本地（web1的数据更新到web2）
git pull

查看版本日志。
git log
git log --pretty=onelin
git log --onelin
git reflog

备注：客户端也可以使用图形程序访问服务器。
Windows需要安装git和tortoiseGit。如图-3所示。

##############################################################################

	2 案例2： HEAD指针操作
沿用练习一，学习操作HEAD指针，具体要求如下：
查看Git版本信息
移动指针
通过移动HEAD指针恢复数据

HEAD指针是一个可以在任何分支和版本移动的指针，通过移动指针我们可以将数据还原至任何版本。没做一次提交操作都会导致git更新一个版本，HEAD指针也跟着自动移动。

准备工作（多对数据仓库进行修改、提交操作，以产生多个版本）。

 查看Git版本信息。
git reflog
git log --oneline

3）移动HEAD指针，将数据还原到任意版本。
git reset --hard 30351
git reflog      #查看指针移动历史

4)模拟误删后的数据还原操作。
git rm init.txt   删除
git commit -m "sscc"                #提交本地仓库
git reset --hard 04ddc0f            #恢复数据

###############################################################################

	3 案例3：Git分支操作
沿用练习二，学习操作Git分支，具体要求如下：
查看分支
创建分支
切换分支
合并分支
解决分支的冲突

Git支持按功能模块、时间、版本等标准创建分支，分支可以让开发分多条主线同时进行，每条主线互不影响，

常见的分支规范如下：
MASTER分支（MASTER是主分支，是代码的核心）。
DEVELOP分支（DEVELOP最新开发成果的分支）。
RELEASE分支（为发布新产品设置的分支）。
HOTFIX分支（为了修复软件BUG缺陷的分支）。
FEATURE分支（为开发新功能设置的分支）。

步骤一：查看并创建分支
1）查看当前分支。
git status
git branch -v

2）创建分支。
git branch hotfix
git branch -v

步骤二：切换与合并分支
1）切换分支。
git checkout hotfix
git status

2）在新的分支上可以继续进行数据操作（增、删、改、查）。

3）将hotfix修改的数据合并到master分支。
注意，合并前必须要先切换到master分支，然后再执行merge命令。
git checkout master
 cat new.txt        #默认master分支中没有hotfix分支中的数据
git merge hotfix

4）将所有本地修改提交远程服务器。
git push

步骤二：解决版本分支的冲突问题

1）在不同分支中修改相同文件的相同行数据，模拟数据冲突。

[root@web2 project]# git checkout hotfix
[root@web2 project]# echo "AAA" > a.txt
[root@web2 project]# git add .
[root@web2 project]# git commit -m "add a.txt by hotfix"
[root@web2 project]# git checkout master
[root@web2 project]# echo "BBB" > a.txt
[root@web2 project]# git add .
[root@web2 project]# git commit -m "add a.txt by master"
自动合并 a.txt
冲突（添加/添加）：合并冲突于 a.txt
自动合并失败，修正冲突然后提交修正的结果。

2）查看有冲突的文件内容，修改文件为最终版本的数据，解决冲突。

[root@web2 project]# cat a.txt                #该文件中包含有冲突的内容
<<<<<<< HEAD
BBB
=======
AAA
>>>>>>> hotfix
[root@web2 project]# vim a.txt              #修改该文件，为最终需要的数据，解决冲突
BBB
[root@web2 project]# git add .
[root@web2 project]# git commit -m "resolved"

总结：分支指针与HEAD指针的关系。
创建分支的本质是在当前提交上创建一个可以移动的指针
如何判断当前分支呢？答案是根据HEAD这个特殊指针

###############################################################################

	4 案例4：Git服务器
沿用练习三，学习Git不同的服务器形式，具体要求如下：
创建SSH协议服务器
创建Git协议服务器
创建HTTP协议服务器

Git支持很多服务器协议形式，不同协议的Git服务器，客户端就可以使用不同的形式访问服务器。创建的服务器协议有SSH协议、Git协议、HTTP协议。

步骤一：SSH协议服务器（支持读写操作）
1）创建基于密码验证的SSH协议服务器（web1主机操作）。

git init --bare /var/git/base_ssh

2)客户端访问的方式（web2主机操作）。
git clone root@192.168.2.100:/var/git/base_ssh
rm -rf base_ssh

3）客户端生成SSH密钥，实现免密码登陆git服务器（web2主机操作）。
ssh-keygen -f /root/.ssh/id_rsa -N ''
 ssh-copy-id  192.168.2.100
 git clone root@192.168.2.100:/var/git
 git push

步骤二：Git协议服务器（只读操作的服务器）
1）安装git-daemon软件包（web1主机操作）。
 yum -y install git-daemon

2）创建版本库（web1主机操作）。

3）修改配置文件，启动git服务（web1主机操作）。
 vim /usr/lib/systemd/system/git@.service
修改前内容如下：
ExecStart=-/usr/libexec/git-core/git-daemon --base-path=/var/lib/git 
--export-all --user-path=public_git --syslog --inetd –verbose
修改后内容如下：
ExecStart=-/usr/libexec/git-core/git-daemon --base-path=/var/git 
--export-all --user-path=public_git --syslog --inetd –verbose
[root@web1 ~]# systemctl  start  git.socket

4）客户端访问方式（web2主机操作）

步骤三：HTTP协议服务器（只读操作的服务器）

1）安装gitweb、httpd软件包（web1主机操作）。
2）修改配置文件，设置仓库根目录（web1主机操作）。

 vim +11 /etc/gitweb.conf 
$projectroot = "/var/git";                        #添加一行

3) 创建版本仓库（web1主机操作）
4）启动httpd服务器
5）客户端访问方式（web2主机操作）
注意：调用虚拟机中的firefox浏览器，需要在远程时使用ssh -X 服务器IP，并且确保真实主机的firefox已经关闭
 firefox http://192.168.2.100/git/

步骤四：课外扩展知识：注册使用Github

###############################################################################

	5 案例5：制作nginx的RPM包
本案例使用nginx-1.12.2版本的源码软件，生成对应的RPM包软件，具体要求如下：
软件名称为nginx
软件版本为1.12.2
RPM软件包可以查询描述信息
RPM软件包可以安装及卸载

安装rpm-build软件包，编写SPEC配置文件，创建新的RPM软件包。
步骤一：安装rpm-build软件

2）生成rpmbuild目录结构
 rpmbuild -ba nginx.spec                //会报错，没有文件或目录
 ls /root/rpmbuild                    //自动生成的目录结构

3）准备工作，将源码软件复制到SOURCES目录
 cp nginx-1.12.2.tar.gz /root/rpmbuild/SOURCES/

4）创建并修改SPEC配置文件
vim /root/rpmbuild/SPECS/nginx.spec 

Name:nginx                                        #源码包软件名称
Version:1.12.2                                    #源码包软件的版本号
Release:    10                                        #制作的RPM包版本号
Summary: Nginx is a web server software.            #RPM软件的概述    
License:GPL                                        #软件的协议
URL:    www.test.com                                    #网址
Source0:nginx-1.12.2.tar.gz                        #源码包文件的全称
#BuildRequires:                                    #制作RPM时的依赖关系
#Requires:                                        #安装RPM时的依赖关系
%description
nginx [engine x] is an HTTP and reverse proxy server.    #软件的详细描述
%post
useradd nginx                               #非必需操作：安装后脚本(创建账户)
%prep
%setup -q                                #自动解压源码包，并cd进入目录
%build
./configure
make %{?_smp_mflags}
%install
make install DESTDIR=%{buildroot}
%files
%doc
/usr/local/nginx/*                    #对哪些文件与目录打包
%changelog

步骤二：使用配置文件创建RPM包

1）安装依赖软件包
 yum -y install  gcc  pcre-devel openssl-devel

2）rpmbuild创建RPM软件包
rpmbuild -ba /root/rpmbuild/SPECS/nginx.spec
 ls /root/rpmbuild/RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm
 rpm -qpi RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm 
 rpm -qpl nginx-1.12.2-10.x86_64.rpm 

步骤三：安装、卸载软件
 rpm -ivh RPMS/x86_64/nginx-1.12.2-10.x86_64.rpm 















